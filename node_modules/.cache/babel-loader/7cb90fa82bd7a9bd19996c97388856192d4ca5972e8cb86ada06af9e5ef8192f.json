{"ast":null,"code":"import { createVNode as _createVNode } from \"vue\";\nimport { ref, watch, computed, reactive, defineComponent } from \"vue\";\nimport { clamp, numericProp, preventDefault, createNamespace, makeRequiredProp, LONG_PRESS_START_TIME } from \"../utils/index.mjs\";\nimport { useTouch } from \"../composables/use-touch.mjs\";\nimport { useEventListener } from \"@vant/use\";\nimport { Image } from \"../image/index.mjs\";\nimport { Loading } from \"../loading/index.mjs\";\nimport { SwipeItem } from \"../swipe-item/index.mjs\";\nconst getDistance = touches => Math.sqrt((touches[0].clientX - touches[1].clientX) ** 2 + (touches[0].clientY - touches[1].clientY) ** 2);\nconst bem = createNamespace(\"image-preview\")[1];\nvar stdin_default = defineComponent({\n  props: {\n    src: String,\n    show: Boolean,\n    active: Number,\n    minZoom: makeRequiredProp(numericProp),\n    maxZoom: makeRequiredProp(numericProp),\n    rootWidth: makeRequiredProp(Number),\n    rootHeight: makeRequiredProp(Number),\n    disableZoom: Boolean\n  },\n  emits: [\"scale\", \"close\", \"longPress\"],\n  setup(props, {\n    emit,\n    slots\n  }) {\n    const state = reactive({\n      scale: 1,\n      moveX: 0,\n      moveY: 0,\n      moving: false,\n      zooming: false,\n      imageRatio: 0,\n      displayWidth: 0,\n      displayHeight: 0\n    });\n    const touch = useTouch();\n    const swipeItem = ref();\n    const vertical = computed(() => {\n      const {\n        rootWidth,\n        rootHeight\n      } = props;\n      const rootRatio = rootHeight / rootWidth;\n      return state.imageRatio > rootRatio;\n    });\n    const imageStyle = computed(() => {\n      const {\n        scale,\n        moveX,\n        moveY,\n        moving,\n        zooming\n      } = state;\n      const style = {\n        transitionDuration: zooming || moving ? \"0s\" : \".3s\"\n      };\n      if (scale !== 1) {\n        const offsetX = moveX / scale;\n        const offsetY = moveY / scale;\n        style.transform = `scale(${scale}, ${scale}) translate(${offsetX}px, ${offsetY}px)`;\n      }\n      return style;\n    });\n    const maxMoveX = computed(() => {\n      if (state.imageRatio) {\n        const {\n          rootWidth,\n          rootHeight\n        } = props;\n        const displayWidth = vertical.value ? rootHeight / state.imageRatio : rootWidth;\n        return Math.max(0, (state.scale * displayWidth - rootWidth) / 2);\n      }\n      return 0;\n    });\n    const maxMoveY = computed(() => {\n      if (state.imageRatio) {\n        const {\n          rootWidth,\n          rootHeight\n        } = props;\n        const displayHeight = vertical.value ? rootHeight : rootWidth * state.imageRatio;\n        return Math.max(0, (state.scale * displayHeight - rootHeight) / 2);\n      }\n      return 0;\n    });\n    const setScale = scale => {\n      scale = clamp(scale, +props.minZoom, +props.maxZoom + 1);\n      if (scale !== state.scale) {\n        state.scale = scale;\n        emit(\"scale\", {\n          scale,\n          index: props.active\n        });\n      }\n    };\n    const resetScale = () => {\n      setScale(1);\n      state.moveX = 0;\n      state.moveY = 0;\n    };\n    const toggleScale = () => {\n      const scale = state.scale > 1 ? 1 : 2;\n      setScale(scale);\n      state.moveX = 0;\n      state.moveY = 0;\n    };\n    let fingerNum;\n    let startMoveX;\n    let startMoveY;\n    let startScale;\n    let startDistance;\n    let doubleTapTimer;\n    let touchStartTime;\n    let isImageMoved = false;\n    const onTouchStart = event => {\n      const {\n        touches\n      } = event;\n      fingerNum = touches.length;\n      if (fingerNum === 2 && props.disableZoom) {\n        return;\n      }\n      const {\n        offsetX\n      } = touch;\n      touch.start(event);\n      startMoveX = state.moveX;\n      startMoveY = state.moveY;\n      touchStartTime = Date.now();\n      isImageMoved = false;\n      state.moving = fingerNum === 1 && state.scale !== 1;\n      state.zooming = fingerNum === 2 && !offsetX.value;\n      if (state.zooming) {\n        startScale = state.scale;\n        startDistance = getDistance(event.touches);\n      }\n    };\n    const onTouchMove = event => {\n      const {\n        touches\n      } = event;\n      touch.move(event);\n      if (state.moving) {\n        const {\n          deltaX,\n          deltaY\n        } = touch;\n        const moveX = deltaX.value + startMoveX;\n        const moveY = deltaY.value + startMoveY;\n        if ((moveX > maxMoveX.value || moveX < -maxMoveX.value) && !isImageMoved) {\n          state.moving = false;\n          return;\n        }\n        isImageMoved = true;\n        preventDefault(event, true);\n        state.moveX = clamp(moveX, -maxMoveX.value, maxMoveX.value);\n        state.moveY = clamp(moveY, -maxMoveY.value, maxMoveY.value);\n      }\n      if (state.zooming) {\n        preventDefault(event, true);\n        if (touches.length === 2) {\n          const distance = getDistance(touches);\n          const scale = startScale * distance / startDistance;\n          setScale(scale);\n        }\n      }\n    };\n    const checkTap = () => {\n      if (fingerNum > 1) {\n        return;\n      }\n      const {\n        offsetX,\n        offsetY\n      } = touch;\n      const deltaTime = Date.now() - touchStartTime;\n      const TAP_TIME = 250;\n      const TAP_OFFSET = 5;\n      if (offsetX.value < TAP_OFFSET && offsetY.value < TAP_OFFSET) {\n        if (deltaTime < TAP_TIME) {\n          if (doubleTapTimer) {\n            clearTimeout(doubleTapTimer);\n            doubleTapTimer = null;\n            toggleScale();\n          } else {\n            doubleTapTimer = setTimeout(() => {\n              emit(\"close\");\n              doubleTapTimer = null;\n            }, TAP_TIME);\n          }\n        } else if (deltaTime > LONG_PRESS_START_TIME) {\n          emit(\"longPress\");\n        }\n      }\n    };\n    const onTouchEnd = event => {\n      let stopPropagation = false;\n      if (state.moving || state.zooming) {\n        stopPropagation = true;\n        if (state.moving && startMoveX === state.moveX && startMoveY === state.moveY) {\n          stopPropagation = false;\n        }\n        if (!event.touches.length) {\n          if (state.zooming) {\n            state.moveX = clamp(state.moveX, -maxMoveX.value, maxMoveX.value);\n            state.moveY = clamp(state.moveY, -maxMoveY.value, maxMoveY.value);\n            state.zooming = false;\n          }\n          state.moving = false;\n          startMoveX = 0;\n          startMoveY = 0;\n          startScale = 1;\n          if (state.scale < 1) {\n            resetScale();\n          }\n          const maxZoom = +props.maxZoom;\n          if (state.scale > maxZoom) {\n            state.scale = maxZoom;\n          }\n        }\n      }\n      preventDefault(event, stopPropagation);\n      checkTap();\n      touch.reset();\n    };\n    const onLoad = event => {\n      const {\n        naturalWidth,\n        naturalHeight\n      } = event.target;\n      state.imageRatio = naturalHeight / naturalWidth;\n    };\n    watch(() => props.active, resetScale);\n    watch(() => props.show, value => {\n      if (!value) {\n        resetScale();\n      }\n    });\n    useEventListener(\"touchmove\", onTouchMove, {\n      target: computed(() => {\n        var _a;\n        return (_a = swipeItem.value) == null ? void 0 : _a.$el;\n      })\n    });\n    return () => {\n      const imageSlots = {\n        loading: () => _createVNode(Loading, {\n          \"type\": \"spinner\"\n        }, null)\n      };\n      return _createVNode(SwipeItem, {\n        \"ref\": swipeItem,\n        \"class\": bem(\"swipe-item\"),\n        \"onTouchstartPassive\": onTouchStart,\n        \"onTouchend\": onTouchEnd,\n        \"onTouchcancel\": onTouchEnd\n      }, {\n        default: () => [slots.image ? _createVNode(\"div\", {\n          \"class\": bem(\"image-wrap\")\n        }, [slots.image({\n          src: props.src\n        })]) : _createVNode(Image, {\n          \"src\": props.src,\n          \"fit\": \"contain\",\n          \"class\": bem(\"image\", {\n            vertical: vertical.value\n          }),\n          \"style\": imageStyle.value,\n          \"onLoad\": onLoad\n        }, imageSlots)]\n      });\n    };\n  }\n});\nexport { stdin_default as default };","map":{"version":3,"names":["createVNode","_createVNode","ref","watch","computed","reactive","defineComponent","clamp","numericProp","preventDefault","createNamespace","makeRequiredProp","LONG_PRESS_START_TIME","useTouch","useEventListener","Image","Loading","SwipeItem","getDistance","touches","Math","sqrt","clientX","clientY","bem","stdin_default","props","src","String","show","Boolean","active","Number","minZoom","maxZoom","rootWidth","rootHeight","disableZoom","emits","setup","emit","slots","state","scale","moveX","moveY","moving","zooming","imageRatio","displayWidth","displayHeight","touch","swipeItem","vertical","rootRatio","imageStyle","style","transitionDuration","offsetX","offsetY","transform","maxMoveX","value","max","maxMoveY","setScale","index","resetScale","toggleScale","fingerNum","startMoveX","startMoveY","startScale","startDistance","doubleTapTimer","touchStartTime","isImageMoved","onTouchStart","event","length","start","Date","now","onTouchMove","move","deltaX","deltaY","distance","checkTap","deltaTime","TAP_TIME","TAP_OFFSET","clearTimeout","setTimeout","onTouchEnd","stopPropagation","reset","onLoad","naturalWidth","naturalHeight","target","_a","$el","imageSlots","loading","default","image"],"sources":["D:/java项目/网易云音乐/node_modules/vant/es/image-preview/ImagePreviewItem.mjs"],"sourcesContent":["import { createVNode as _createVNode } from \"vue\";\nimport { ref, watch, computed, reactive, defineComponent } from \"vue\";\nimport { clamp, numericProp, preventDefault, createNamespace, makeRequiredProp, LONG_PRESS_START_TIME } from \"../utils/index.mjs\";\nimport { useTouch } from \"../composables/use-touch.mjs\";\nimport { useEventListener } from \"@vant/use\";\nimport { Image } from \"../image/index.mjs\";\nimport { Loading } from \"../loading/index.mjs\";\nimport { SwipeItem } from \"../swipe-item/index.mjs\";\nconst getDistance = (touches) => Math.sqrt((touches[0].clientX - touches[1].clientX) ** 2 + (touches[0].clientY - touches[1].clientY) ** 2);\nconst bem = createNamespace(\"image-preview\")[1];\nvar stdin_default = defineComponent({\n  props: {\n    src: String,\n    show: Boolean,\n    active: Number,\n    minZoom: makeRequiredProp(numericProp),\n    maxZoom: makeRequiredProp(numericProp),\n    rootWidth: makeRequiredProp(Number),\n    rootHeight: makeRequiredProp(Number),\n    disableZoom: Boolean\n  },\n  emits: [\"scale\", \"close\", \"longPress\"],\n  setup(props, {\n    emit,\n    slots\n  }) {\n    const state = reactive({\n      scale: 1,\n      moveX: 0,\n      moveY: 0,\n      moving: false,\n      zooming: false,\n      imageRatio: 0,\n      displayWidth: 0,\n      displayHeight: 0\n    });\n    const touch = useTouch();\n    const swipeItem = ref();\n    const vertical = computed(() => {\n      const {\n        rootWidth,\n        rootHeight\n      } = props;\n      const rootRatio = rootHeight / rootWidth;\n      return state.imageRatio > rootRatio;\n    });\n    const imageStyle = computed(() => {\n      const {\n        scale,\n        moveX,\n        moveY,\n        moving,\n        zooming\n      } = state;\n      const style = {\n        transitionDuration: zooming || moving ? \"0s\" : \".3s\"\n      };\n      if (scale !== 1) {\n        const offsetX = moveX / scale;\n        const offsetY = moveY / scale;\n        style.transform = `scale(${scale}, ${scale}) translate(${offsetX}px, ${offsetY}px)`;\n      }\n      return style;\n    });\n    const maxMoveX = computed(() => {\n      if (state.imageRatio) {\n        const {\n          rootWidth,\n          rootHeight\n        } = props;\n        const displayWidth = vertical.value ? rootHeight / state.imageRatio : rootWidth;\n        return Math.max(0, (state.scale * displayWidth - rootWidth) / 2);\n      }\n      return 0;\n    });\n    const maxMoveY = computed(() => {\n      if (state.imageRatio) {\n        const {\n          rootWidth,\n          rootHeight\n        } = props;\n        const displayHeight = vertical.value ? rootHeight : rootWidth * state.imageRatio;\n        return Math.max(0, (state.scale * displayHeight - rootHeight) / 2);\n      }\n      return 0;\n    });\n    const setScale = (scale) => {\n      scale = clamp(scale, +props.minZoom, +props.maxZoom + 1);\n      if (scale !== state.scale) {\n        state.scale = scale;\n        emit(\"scale\", {\n          scale,\n          index: props.active\n        });\n      }\n    };\n    const resetScale = () => {\n      setScale(1);\n      state.moveX = 0;\n      state.moveY = 0;\n    };\n    const toggleScale = () => {\n      const scale = state.scale > 1 ? 1 : 2;\n      setScale(scale);\n      state.moveX = 0;\n      state.moveY = 0;\n    };\n    let fingerNum;\n    let startMoveX;\n    let startMoveY;\n    let startScale;\n    let startDistance;\n    let doubleTapTimer;\n    let touchStartTime;\n    let isImageMoved = false;\n    const onTouchStart = (event) => {\n      const {\n        touches\n      } = event;\n      fingerNum = touches.length;\n      if (fingerNum === 2 && props.disableZoom) {\n        return;\n      }\n      const {\n        offsetX\n      } = touch;\n      touch.start(event);\n      startMoveX = state.moveX;\n      startMoveY = state.moveY;\n      touchStartTime = Date.now();\n      isImageMoved = false;\n      state.moving = fingerNum === 1 && state.scale !== 1;\n      state.zooming = fingerNum === 2 && !offsetX.value;\n      if (state.zooming) {\n        startScale = state.scale;\n        startDistance = getDistance(event.touches);\n      }\n    };\n    const onTouchMove = (event) => {\n      const {\n        touches\n      } = event;\n      touch.move(event);\n      if (state.moving) {\n        const {\n          deltaX,\n          deltaY\n        } = touch;\n        const moveX = deltaX.value + startMoveX;\n        const moveY = deltaY.value + startMoveY;\n        if ((moveX > maxMoveX.value || moveX < -maxMoveX.value) && !isImageMoved) {\n          state.moving = false;\n          return;\n        }\n        isImageMoved = true;\n        preventDefault(event, true);\n        state.moveX = clamp(moveX, -maxMoveX.value, maxMoveX.value);\n        state.moveY = clamp(moveY, -maxMoveY.value, maxMoveY.value);\n      }\n      if (state.zooming) {\n        preventDefault(event, true);\n        if (touches.length === 2) {\n          const distance = getDistance(touches);\n          const scale = startScale * distance / startDistance;\n          setScale(scale);\n        }\n      }\n    };\n    const checkTap = () => {\n      if (fingerNum > 1) {\n        return;\n      }\n      const {\n        offsetX,\n        offsetY\n      } = touch;\n      const deltaTime = Date.now() - touchStartTime;\n      const TAP_TIME = 250;\n      const TAP_OFFSET = 5;\n      if (offsetX.value < TAP_OFFSET && offsetY.value < TAP_OFFSET) {\n        if (deltaTime < TAP_TIME) {\n          if (doubleTapTimer) {\n            clearTimeout(doubleTapTimer);\n            doubleTapTimer = null;\n            toggleScale();\n          } else {\n            doubleTapTimer = setTimeout(() => {\n              emit(\"close\");\n              doubleTapTimer = null;\n            }, TAP_TIME);\n          }\n        } else if (deltaTime > LONG_PRESS_START_TIME) {\n          emit(\"longPress\");\n        }\n      }\n    };\n    const onTouchEnd = (event) => {\n      let stopPropagation = false;\n      if (state.moving || state.zooming) {\n        stopPropagation = true;\n        if (state.moving && startMoveX === state.moveX && startMoveY === state.moveY) {\n          stopPropagation = false;\n        }\n        if (!event.touches.length) {\n          if (state.zooming) {\n            state.moveX = clamp(state.moveX, -maxMoveX.value, maxMoveX.value);\n            state.moveY = clamp(state.moveY, -maxMoveY.value, maxMoveY.value);\n            state.zooming = false;\n          }\n          state.moving = false;\n          startMoveX = 0;\n          startMoveY = 0;\n          startScale = 1;\n          if (state.scale < 1) {\n            resetScale();\n          }\n          const maxZoom = +props.maxZoom;\n          if (state.scale > maxZoom) {\n            state.scale = maxZoom;\n          }\n        }\n      }\n      preventDefault(event, stopPropagation);\n      checkTap();\n      touch.reset();\n    };\n    const onLoad = (event) => {\n      const {\n        naturalWidth,\n        naturalHeight\n      } = event.target;\n      state.imageRatio = naturalHeight / naturalWidth;\n    };\n    watch(() => props.active, resetScale);\n    watch(() => props.show, (value) => {\n      if (!value) {\n        resetScale();\n      }\n    });\n    useEventListener(\"touchmove\", onTouchMove, {\n      target: computed(() => {\n        var _a;\n        return (_a = swipeItem.value) == null ? void 0 : _a.$el;\n      })\n    });\n    return () => {\n      const imageSlots = {\n        loading: () => _createVNode(Loading, {\n          \"type\": \"spinner\"\n        }, null)\n      };\n      return _createVNode(SwipeItem, {\n        \"ref\": swipeItem,\n        \"class\": bem(\"swipe-item\"),\n        \"onTouchstartPassive\": onTouchStart,\n        \"onTouchend\": onTouchEnd,\n        \"onTouchcancel\": onTouchEnd\n      }, {\n        default: () => [slots.image ? _createVNode(\"div\", {\n          \"class\": bem(\"image-wrap\")\n        }, [slots.image({\n          src: props.src\n        })]) : _createVNode(Image, {\n          \"src\": props.src,\n          \"fit\": \"contain\",\n          \"class\": bem(\"image\", {\n            vertical: vertical.value\n          }),\n          \"style\": imageStyle.value,\n          \"onLoad\": onLoad\n        }, imageSlots)]\n      });\n    };\n  }\n});\nexport {\n  stdin_default as default\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}